'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = require('lodash');
var iterator = require('object-recursive-iterator');
var extend = require('deep-extend');

module.exports = function (defaultConfig, productionConfig, envFile) {
  applyEnvFile(envFile);
  resolveConfig(defaultConfig);
  resolveConfig(productionConfig);

  var resultConfig = mergeConfigs(defaultConfig, productionConfig);

  return (0, _extends3.default)({
    get: function get(name) {
      return getConfig(defaultConfig, productionConfig, name);
    }
  }, resultConfig);
};

function resolveConfig(config) {
  iterator.forAll(config, function (path, key, obj) {
    if (_.startsWith(obj[key], '$')) {
      var jsonEnvVarName = _.trim(obj[key], '$');
      var value = _.trim(process.env[jsonEnvVarName], '\'');
      if (value) obj[key] = JSON.parse(value);
      return;
    }

    obj[key] = process.env[obj[key]] || obj[key];
  });
}

function applyEnvFile(envFile) {
  _.mapKeys(envFile, function (value, envName) {
    process.env[envName] = value;
  });
}

function getConfig(defaultConfig, productionConfig, name) {
  var defaultConfigNode = _.get(defaultConfig, name);
  var prodConfigNode = _.get(productionConfig, name);

  if (process.env.NODE_ENV === 'production') return prodConfigNode || defaultConfigNode;
  return defaultConfigNode;
}

function mergeConfigs(defaultConfig, productionConfig) {
  return process.env.NODE_ENV === 'production' ? extend(defaultConfig, productionConfig) : defaultConfig;
}