'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var publish = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(exchange, key, msg) {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getChannel();

          case 2:
            _context2.t0 = exchange;
            _context2.t1 = key;
            _context2.t2 = new Buffer((0, _stringify2.default)(msg));
            _context2.next = 7;
            return _context2.sent.publish(_context2.t0, _context2.t1, _context2.t2);

          case 7:
            return _context2.abrupt('return', _context2.sent);

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function publish(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

var assertQueue = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(queue, exchange, key) {
    var channel;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return getChannel();

          case 2:
            channel = _context3.sent;
            _context3.next = 5;
            return channel.assertExchange(exchange, 'topic', { durable: true });

          case 5:
            _context3.next = 7;
            return channel.assertQueue(queue, { exclusive: false, durable: true });

          case 7:
            _context3.next = 9;
            return channel.bindQueue(queue, exchange, key);

          case 9:
            debug('assertQueue', { queue: queue, exchange: exchange, key: key });

          case 10:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function assertQueue(_x6, _x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();

var consume = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(queue, fn) {
    var _this2 = this;

    var channel;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return getChannel();

          case 2:
            channel = _context5.sent;

            channel.consume(queue, function () {
              var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(msg) {
                var data;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        data = JSON.parse(msg.content.toString());
                        _context4.prev = 1;
                        _context4.next = 4;
                        return fn(data);

                      case 4:
                        _context4.next = 10;
                        break;

                      case 6:
                        _context4.prev = 6;
                        _context4.t0 = _context4['catch'](1);

                        debug('Error in queue', queue, _context4.t0, data);
                        channel.publish(FAIL_EXCHANGE, '', new Buffer((0, _stringify2.default)({ err: _context4.t0.message, data: data })));

                      case 10:
                      case 'end':
                        return _context4.stop();
                    }
                  }
                }, _callee4, _this2, [[1, 6]]);
              }));

              return function (_x11) {
                return _ref5.apply(this, arguments);
              };
            }(), { noAck: true, exclusive: false });

          case 4:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function consume(_x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FAIL_EXCHANGE = 'fail';
var FAIL_QUEUE = 'fail-queue';
var RECONNECT_INTERVAL = 3000;
var RECONNECT_TRIES = 20;

var debug = require('debug')('app:node-helpers:amqp');
var amqp = require('amqplib');
var retry = require('bluebird-retry');

var channel = void 0;
var amqpUrl = void 0;

function getChannel() {
  var _this = this;

  if (channel) return _promise2.default.resolve(channel);

  return retry(function () {
    return new _promise2.default(function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(resolve, reject) {
        var connection;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return amqp.connect(amqpUrl);

              case 3:
                connection = _context.sent;


                connection.on('error', function (err) {
                  debug(err);
                  reject(err);
                });

                _context.next = 7;
                return connection.createChannel();

              case 7:
                channel = _context.sent;
                _context.next = 10;
                return channel.assertExchange(FAIL_EXCHANGE, 'topic', { durable: true });

              case 10:
                _context.next = 12;
                return channel.assertQueue(FAIL_QUEUE, { exclusive: false, durable: true });

              case 12:
                _context.next = 14;
                return channel.bindQueue(FAIL_QUEUE, FAIL_EXCHANGE, '#');

              case 14:

                resolve(channel);
                _context.next = 21;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context['catch'](0);

                debug(_context.t0);
                reject(_context.t0);

              case 21:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this, [[0, 17]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
  }, { interval: RECONNECT_INTERVAL, max_tries: RECONNECT_TRIES });
}

function consumeAsync(queue) {
  var _this3 = this;

  return new _promise2.default(function () {
    var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(resolve) {
      var channel;
      return _regenerator2.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return getChannel();

            case 2:
              channel = _context6.sent;

              channel.consume(queue, function (msg) {
                resolve(JSON.parse(msg.content.toString()));
              }, { noAck: true });

            case 4:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, _this3);
    }));

    return function (_x12) {
      return _ref6.apply(this, arguments);
    };
  }());
}

module.exports = function (url) {
  amqpUrl = url;

  return {
    consumeAsync: consumeAsync,
    getChannel: getChannel,
    publish: publish,
    assertQueue: assertQueue,
    consume: consume
  };
};